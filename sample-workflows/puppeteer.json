{
  "name": "Puppeteer Sample Workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "4ed049f3-790e-469e-89e4-4ae78c70d05b",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "screenshot",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        460,
        -120
      ],
      "id": "599bc834-fa45-4c52-8b98-5ea84c5917ad",
      "name": "Show Screenshot"
    },
    {
      "parameters": {
        "jsCode": "const puppeteer = require('puppeteer-core');\n\ntry {\n  const browser = await puppeteer.launch({\n    headless: 'new',\n    executablePath: '/usr/bin/chromium',\n    args: ['--no-sandbox', '--disable-setuid-sandbox'],\n  });\n\n  const page = await browser.newPage();\n  await page.goto('https://www.example.com', { waitUntil: 'domcontentloaded' });\n\n  const screenshot = await page.screenshot({ encoding: 'base64' });\n  const pageContent = await page.content(); // Get the full HTML content of the page\n\n  await browser.close();\n\n  return [{ \n    json: { \n      success: true, \n      screenshot: screenshot, \n      content: pageContent \n    } \n  }];\n} catch (error) {\n  return [{ \n    json: { \n      success: false, \n      error: error.message || 'Unknown error', \n      stack: error.stack || 'No stack trace available' \n    } \n  }];\n}"
      },
      "id": "6a3b9f85-b4d1-411f-a1ea-0b9ec96cacd6",
      "name": "Get Web Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "const cheerio = require('cheerio');\n\ntry {\n  const html = $input.first().json.content;\n\n  // Load HTML into Cheerio\n  const $ = cheerio.load(html);\n\n  // Extract data\n  const title = $('title').text();\n  const metaCharset = $('meta[charset]').attr('charset');\n  const metaViewport = $('meta[name=\"viewport\"]').attr('content');\n  const bodyText = $('body').text().trim().replace(/\\s+/g, ' '); // Remove extra whitespace\n\n  return [{\n    json: {\n      success: true,\n      title,\n      meta: {\n        charset: metaCharset,\n        viewport: metaViewport\n      },\n      bodyText\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      success: false,\n      error: error.message || 'Unknown error',\n      stack: error.stack || 'No stack trace available'\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        80
      ],
      "id": "9ff4edbd-1a2c-4e02-a5b8-58a08e20d3d7",
      "name": "Parse Web Content"
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Get Web Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Web Content": {
      "main": [
        [
          {
            "node": "Show Screenshot",
            "type": "main",
            "index": 0
          },
          {
            "node": "Parse Web Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "29962196-9e4e-415d-b8c0-ba917c8c210d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a2dd5ac79a20d5820a1738a49a3d72ac79185b8ee225254493f06727426144cb"
  },
  "id": "spZu8Cpc9de1kYRH",
  "tags": []
}